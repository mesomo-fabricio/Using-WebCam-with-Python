/*
FABRICIO MESOMO
182366
*/

--                          ***INÍCIO CRIAÇÃO SEQUENCES***

CREATE SEQUENCE SEQ_PRODUTOS INCREMENT BY 1 START WITH 1 NOCACHE NOORDER  NOCYCLE;
CREATE SEQUENCE SEQ_PEDIDOS INCREMENT BY 1 START WITH 300 NOCACHE NOORDER  NOCYCLE;
CREATE SEQUENCE SEQ_NOTA INCREMENT BY 1 START WITH 101 NOCACHE NOORDER  NOCYCLE;

--                          ***FIM CRIAÇÃO SEQUENCES***

--                          ***INÍCIO CRIAÇÃO TABLES***
CREATE TABLE PRODUTOS (
	CD_PRODUTO INT PRIMARY KEY,
	DESCRICAO VARCHAR(60),
	ESTOQUE_MINIMO NUMERIC(6,2),
	ESTOQUE_ATUAL NUMERIC(6,2),
	PRECO NUMERIC(6,2)
);

CREATE TABLE VENDAS (
	NUM_NOTA INT PRIMARY KEY,
    PRODUTO INT,
	QUANTIDADE NUMERIC(6,2),
    FOREIGN KEY (PRODUTO) REFERENCES PRODUTOS(CD_PRODUTO)
);

CREATE TABLE ENTRADAS (
    NUM_NOTA INT PRIMARY KEY,
    PRODUTO INT,
    QUANTIDADE NUMERIC(6,2),
    FOREIGN KEY (PRODUTO) REFERENCES PRODUTOS(CD_PRODUTO)
);

CREATE TABLE PEDIDOS (
    NUM_PEDIDO INT PRIMARY KEY,
    PRODUTO INT,
    QUANTIDADE NUMERIC(6,2),
    FOREIGN KEY (PRODUTO) REFERENCES PRODUTOS(CD_PRODUTO)
);

--                          ***FIM CRIAÇÃO TABLES***

--                          ***INÍCIO CRIAÇÃO FUNÇÕES***

CREATE OR REPLACE FUNCTION TEMPEDIDO(vMAT NUMBER)
RETURN INT AS
NR_PEDIDOS INT;
BEGIN
    SELECT COUNT(*) INTO NR_PEDIDOS FROM PEDIDOS
    WHERE PRODUTO=vMAT;
    
    RETURN NR_PEDIDOS;
END TEMPEDIDO;

--                          ***FIM CRIAÇÃO FUNÇÕES***


                    
--                          ***INÍCIO CRIAÇÃO TRIGGERS***

CREATE OR REPLACE TRIGGER TR_AJUSTA_ESTOQUE_VENDA
AFTER INSERT ON VENDAS
FOR EACH ROW
DECLARE
V_ESTOQUE INT;
V_MINIMO INT;
QT_PEDIDO INT;
BEGIN
    UPDATE PRODUTOS 
    SET ESTOQUE_ATUAL= ESTOQUE_ATUAL-:NEW.QUANTIDADE
    WHERE CD_PRODUTO=:NEW.PRODUTO;

    SELECT ESTOQUE_ATUAL, ESTOQUE_MINIMO INTO V_ESTOQUE, V_MINIMO
    FROM PRODUTOS 
    WHERE CD_PRODUTO=:NEW.PRODUTO;

    IF (V_ESTOQUE < V_MINIMO) THEN
        QT_PEDIDO:= (V_MINIMO-V_ESTOQUE);
            IF (TEMPEDIDO(:NEW.PRODUTO) = 0) THEN
                INSERT INTO PEDIDOS (NUM_PEDIDO, PRODUTO, QUANTIDADE)
                VALUES(SEQ_PEDIDOS.NEXTVAL, :NEW.PRODUTO, QT_PEDIDO);
            END IF;    
    END IF;

END;
/
------------------------------------------------------------------------------------------
CREATE OR REPLACE NONEDITIONABLE TRIGGER TR_AJUSTA_ESTOQUE_ENTRADA
AFTER INSERT ON ENTRADAS
FOR EACH ROW
BEGIN
    UPDATE PRODUTOS 
    SET ESTOQUE_ATUAL= ESTOQUE_ATUAL+:NEW.QUANTIDADE
    WHERE CD_PRODUTO=:NEW.PRODUTO;
END;
/
------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER TR_BLOQUEIA_VENDA
BEFORE insert ON VENDAS
FOR EACH ROW
DECLARE 
V_EST_ATUAL INT;
BEGIN
    SELECT ESTOQUE_ATUAL 
    INTO V_EST_ATUAL 
    FROM PRODUTOS WHERE CD_PRODUTO=:NEW.PRODUTO;
    
    IF (:NEW.QUANTIDADE > V_EST_ATUAL) THEN
      raise_application_error(-20001, 'VENDA BLOQUEADA, SALDO INSUFICIENTE');
    END IF;
END;
/
------------------------------------------------------------------------------------------

--                          ***FIM CRIAÇÃO TRIGGERS***

--                          ***INÍCIO INSERTS CADASTRO***

INSERT INTO PRODUTOS(CD_PRODUTO, DESCRICAO, ESTOQUE_MINIMO, ESTOQUE_ATUAL, PRECO)
VALUES (SEQ_PRODUTOS.NEXTVAL, 'SMARTPHONE SAMSUNG J2', 5, 12, 399.90);

INSERT INTO PRODUTOS(CD_PRODUTO, DESCRICAO, ESTOQUE_MINIMO, ESTOQUE_ATUAL, PRECO)
VALUES (SEQ_PRODUTOS.NEXTVAL, 'JBL EXTREME 2', 3, 6, 699);

INSERT INTO PRODUTOS(CD_PRODUTO, DESCRICAO, ESTOQUE_MINIMO, ESTOQUE_ATUAL, PRECO)
VALUES (SEQ_PRODUTOS.NEXTVAL, 'MONITOR SAMSUNG 21,5', 10, 45, 1150);

--                          ***FIM INSERTS CADASTRO***

--                          ***INÍCIO TESTES TRIGGERS***

INSERT INTO ENTRADAS (NUM_NOTA, PRODUTO, QUANTIDADE)
VALUES (3022, 1, 5);

INSERT INTO ENTRADAS (NUM_NOTA, PRODUTO, QUANTIDADE)
VALUES (502, 3, 12);

INSERT INTO ENTRADAS (NUM_NOTA, PRODUTO, QUANTIDADE)
VALUES (11, 2, 5);

-- CRIA PEDIDO
INSERT INTO VENDAS (NUM_NOTA, PRODUTO, QUANTIDADE)
                    VALUES(SEQ_NOTA.NEXTVAL, 1, 13);

-- NÃO CRIA PEDIDO
INSERT INTO VENDAS (NUM_NOTA, PRODUTO, QUANTIDADE)
                    VALUES(SEQ_NOTA.NEXTVAL, 1, 2);

-- CRIA PEDIDO DE OUTRO ITEM
INSERT INTO VENDAS (NUM_NOTA, PRODUTO, QUANTIDADE)
                    VALUES(SEQ_NOTA.NEXTVAL, 2, 10);

-- BLOQUEIA VENDA
INSERT INTO VENDAS (NUM_NOTA, PRODUTO, QUANTIDADE)
                    VALUES(SEQ_NOTA.NEXTVAL, 2, 2);

--                          ***FIM TESTES TRIGGERS***